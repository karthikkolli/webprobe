name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v3
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Extract release notes from CHANGELOG
      id: release_notes
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        NOTES=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md || echo "See CHANGELOG.md for details")
        echo "NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create or Update Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: webprobe v${{ steps.get_version.outputs.VERSION }}
        generate_release_notes: false
        body: |
          ## What's New in v${{ steps.get_version.outputs.VERSION }}
          
          ${{ steps.release_notes.outputs.NOTES }}
          
          ## Installation
          
          ### Quick Install (No Rust Required)
          ```bash
          curl -fsSL https://raw.githubusercontent.com/karthikkolli/webprobe/main/install.sh | bash
          ```
          
          ### Update from Previous Version
          ```bash
          webprobe update --install
          ```
          
          See [README](https://github.com/karthikkolli/webprobe#installation) for more installation options.
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    if: always()
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: webprobe
            asset_name: webprobe-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: webprobe
            asset_name: webprobe-linux-arm64
            use_cross: true
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: webprobe
            asset_name: webprobe-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: webprobe
            asset_name: webprobe-darwin-arm64
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: webprobe.exe
            asset_name: webprobe-windows.exe

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation tools
      if: matrix.use_cross
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    
    - name: Build with MCP support (native only)
      if: '!matrix.use_cross'
      run: cargo build --release --target ${{ matrix.target }} --features mcp
    
    - name: Rename binary
      run: |
        cp ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ./${{ matrix.asset_name }}
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: ./${{ matrix.asset_name }}

  build-packages:
    name: Build Distribution Packages
    needs: create-release
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-deb
      run: cargo install cargo-deb
    
    - name: Build
      run: cargo build --release
    
    - name: Build .deb package
      run: cargo deb --no-build
    
    - name: Find deb file
      id: find_deb
      run: echo "DEB_FILE=$(ls target/debian/*.deb)" >> $GITHUB_OUTPUT
    
    - name: Upload .deb package
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: ${{ steps.find_deb.outputs.DEB_FILE }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}