# webprobe - Browser Inspection for Frontend Development

## Quick Decision Tree
```
Need visual screenshots for comparison? → Use a different tool
Need to test browser-rendered output?   → Continue ↓
Need to maintain state (SPA/auth)?      → Use profile + tab
Just checking one element?              → Use direct command
```

**When to use webprobe:**
- Testing if CSS/HTML changes render correctly (spacing, alignment, overflow)
- Verifying responsive layouts at different viewport sizes
- Checking element visibility and position
- Automating form interactions for testing
- Maintaining authenticated sessions for protected pages

**When NOT to use webprobe:**
- Visual regression testing (screenshot command exists but is for documentation, not comparison)
- Debugging JavaScript execution
- Monitoring network requests/responses  
- Measuring page load performance
- Analyzing SEO meta tags (validate command provides only basic checks)

## Key Concepts for Using webprobe

1. **Daemon is mandatory**: All commands require daemon to be running
2. **SPAs need profiles/tabs**: Modern apps don't have direct URLs to every view
   - Navigate once, test multiple times on same view
   - Use empty URL `""` to stay on current page
3. **Profile → Tab hierarchy**: Tabs exist within profiles, profiles exist within daemon
4. **Empty URL is powerful**: `""` means "don't navigate, stay where you are"
   - Perfect for testing after hot-reload in development
   - Avoids re-clicking through navigation after each code change

## Prerequisites (MUST be done before using any commands)
1. Install ChromeDriver or GeckoDriver (must match browser version):
   - Chrome: `brew install chromedriver` or download from https://chromedriver.chromium.org
   - Firefox: `brew install geckodriver` or download from https://github.com/mozilla/geckodriver
   - Version mismatch is the #1 cause of "WebDriver connection failed" errors
2. Install Firefox or Chrome browser
3. Install webprobe: `cargo install webprobe`
4. **START THE DAEMON** (required for ALL commands):
   ```bash
   webprobe daemon start --browser chrome  # or --browser firefox
   ```
   Note: Daemon stays running between commands for performance

## What webprobe provides
- Exact pixel positions and dimensions
- Computed CSS styles and box model
- Visibility and overflow detection  
- Element relationships and spacing
- Form/navigation detection
- Browser pool for performance (daemon mode)

## What it doesn't provide
- Visual screenshots (measurements only)
- JavaScript debugging or breakpoints
- Network request inspection
- Performance metrics or timings
- Cross-origin iframe access
- Shadow DOM piercing (no --pierce-shadow option)

## Command Selection Guide

**"I need to check if an element is visible and where it's positioned"**
→ Use `inspect`

**"I need to diagnose why my layout is broken"**
→ Use `analyze` with `--focus spacing` or `--focus wrapping`

**"I need to interact with a form or button"**
→ Use `type` for inputs, `click` for buttons

**"I need to maintain login state across multiple commands"**
→ Create a profile, then use `--profile` and `--tab` together

**"I need to wait for dynamic content to load"**
→ Use `wait-idle` or `wait-navigation`

**"I need to find an element by its text content"**
→ Use `find-text`

## Typical SPA Development Workflow

```bash
# 0. Start daemon and create profile (once per session)
webprobe daemon start --browser chrome
webprobe profile create dev --browser chrome

# 1. Navigate to the component you're working on
webprobe inspect "http://localhost:3000" "body" --profile dev --tab main
webprobe click "" ".nav-dashboard" --profile dev --tab main
webprobe click "" ".tab-analytics" --profile dev --tab main

# 2. LLM writes CSS for the chart container
# 3. Check if layout is correct (using empty URL to stay on current view)
webprobe analyze "" ".chart-container" --focus wrapping --profile dev --tab main

# 4. Response shows overflow: charts are 340px but container only 320px
# 5. LLM adjusts CSS: .chart { width: 100%; box-sizing: border-box; }

# ⚠️ IMPORTANT: Hot-reload might reset app to home page!
# Check if still on correct view after hot-reload:
webprobe find-text "" "Analytics Dashboard" --profile dev --tab main

# If hot-reload reset the state, re-navigate:
webprobe click "" ".nav-dashboard" --profile dev --tab main
webprobe click "" ".tab-analytics" --profile dev --tab main

# 6. Now verify the fix
webprobe inspect "" ".chart" --all --profile dev --tab main
```

## Most Common Commands for SPA Development

### For SPAs (React, Vue, Angular) - Use Profiles/Tabs to Maintain State

```bash
# Create a dev session profile
webprobe profile create dev-session --browser chrome

# Navigate to a specific view in your SPA
webprobe inspect "http://localhost:3000" "body" --profile dev-session --tab main
webprobe click "" ".nav-products" --profile dev-session --tab main  # Click Products nav
webprobe click "" ".category-electronics" --profile dev-session --tab main  # Click category
webprobe click "" ".product-card:first-child" --profile dev-session --tab main  # Click product

# Now test your changes on this specific view
webprobe inspect "" ".product-details" --profile dev-session --tab main
webprobe analyze "" ".price-container" --focus spacing --profile dev-session --tab main
```

### For Static Sites - One-Shot Commands Work Fine

```bash
# Direct URL access for static pages
webprobe inspect "http://localhost:3000/about.html" ".content"
webprobe analyze "http://localhost:3000/contact.html" ".form" --focus wrapping
```

**Key Point**: Modern SPAs require clicking through navigation to reach specific states. Use profiles/tabs to avoid repeating navigation steps every time you test a change.

## Core Commands

### inspect - Get element measurements
```bash
webprobe inspect "http://localhost:3000" ".navbar"
```
```json
{
  "selector": ".navbar",
  "position": {"x": 0, "y": 0},
  "size": {"width": 1920, "height": 60},
  "computed_styles": {
    "display": "block",
    "position": "fixed",
    "background-color": "rgb(255, 255, 255)"
  },
  "visible": true,
  "in_viewport": true
}
```

### analyze - Diagnose layout problems with suggested fixes
```bash
webprobe analyze "http://localhost:3000" ".grid" --focus spacing
```
Focus options: `spacing` (margins/gaps), `wrapping` (overflow), `anomalies` (z-index/hidden)

**Note**: Uses heuristic rules, not AI. Checks common patterns like margin collapse, overflow, z-index stacking.
```json
{
  "diagnosis": "Margin collapse between elements",
  "confidence": 0.85,
  "evidence": [
    "nav margin-bottom: 20px",
    "header margin-top: 20px", 
    "collapsed to single 20px gap"
  ],
  "suggested_fix": "Use padding instead of margin, or add border/padding to parent"
}
```

### click, type, scroll - Interact with page
```bash
webprobe click "http://localhost:3000" ".submit-btn"
webprobe type "http://localhost:3000" "#email" "user@example.com" [--clear]
webprobe scroll "http://localhost:3000" --by-y 500
```

### detect - Find smart elements
```bash
webprobe detect "http://localhost:3000"
```
```json
{
  "forms": [{"selector": "form#login", "inputs": 3}],
  "navigation": [{"selector": "nav.main", "links": 5}],
  "tables": []
}
```

## Persistent Sessions (Authentication)

**IMPORTANT**: Tabs require profiles. Profiles require daemon. Architecture: daemon → profile → tab

```bash
# Create a profile for your session
webprobe profile create my-session --browser chrome

# Use tab with profile - tabs REQUIRE profiles
webprobe inspect "http://localhost:3000/login" "form" --profile my-session --tab auth

# Login - empty URL ("") means "stay on current page"
webprobe type "" "#email" "admin@example.com" --profile my-session --tab auth
webprobe type "" "#password" "password123" --profile my-session --tab auth  # Password IS typed, just shown as [REDACTED] in output
webprobe click "" "button[type=submit]" --profile my-session --tab auth

# Verify authentication
webprobe status --profile my-session --tab auth

# Continue in authenticated area
webprobe inspect "" ".dashboard" --profile my-session --tab auth

# Cleanup
webprobe tab close auth
webprobe profile destroy my-session
```

**⚠️ SECURITY WARNING**:
- **NEVER use production credentials** - profiles are stored UNENCRYPTED in `~/.webprobe/profiles/`
- Use test accounts only
- Password fields show as `[REDACTED]` in output but ARE typed into the page
- Tabs persist cookies/session data in memory until daemon stops
- Use `--unsafe-eval` only with trusted code sources

## Handle Dynamic Content

### wait-navigation - Wait for page change
```bash
webprobe wait-navigation "http://localhost:3000" --timeout 10
```

### wait-idle - Wait for network quiet
```bash
webprobe wait-idle "http://localhost:3000" --timeout 10000 --idle-time 500
```

## Hot-Reload Considerations for SPAs

**Problem**: Hot-reload/HMR can reset your app state, returning to home page or login screen.

**Solution 1: Check current state after changes**
```bash
# After making code changes, verify you're still on the right page
webprobe find-text "" "Expected Page Title" --profile dev --tab main
# If not found, re-navigate to your working view
```

**Solution 2: Use batch commands to quickly restore state**
```bash
# Create a batch file to quickly get back to your view
webprobe batch '[
  {"type": "goto", "url": "http://localhost:3000"},
  {"type": "click", "selector": ".nav-products"},
  {"type": "click", "selector": ".category-electronics"},
  {"type": "wait", "selector": ".product-grid", "timeout": 5}
]' --profile dev --tab main
```

**Solution 3: Direct navigation (only if your app's routing supports it)**
```bash
# Works ONLY if:
# - Your app has client-side routing that handles deep links
# - Session/auth survives hot-reload (cookies often do)
# - The route doesn't require specific state from previous navigation
webprobe inspect "http://localhost:3000/dashboard/analytics" "body" --profile dev --tab main
```

## Common Scenarios & Solutions

### Scenario: "Check if my responsive design works"
```bash
# Test mobile view
webprobe inspect "http://localhost:3000" ".nav-menu" --viewport 375x667

# Test tablet view  
webprobe inspect "http://localhost:3000" ".nav-menu" --viewport 768x1024

# Test desktop view
webprobe inspect "http://localhost:3000" ".nav-menu" --viewport 1920x1080
```

### Scenario: "Test a multi-step form"
```bash
# Setup profile for session
webprobe profile create form-test --browser chrome

# Step 1: Fill first page
webprobe type "http://localhost:3000/signup" "#name" "John Doe" --profile form-test --tab main
webprobe type "" "#email" "john@example.com" --profile form-test --tab main
webprobe click "" "button.next" --profile form-test --tab main

# Step 2: Second page (empty URL stays on current page)
webprobe type "" "#address" "123 Main St" --profile form-test --tab main
webprobe click "" "button.submit" --profile form-test --tab main

# Verify success
webprobe inspect "" ".success-message" --profile form-test --tab main
```

## CSS Debugging Patterns

### Element invisible but should be visible
```bash
# Step 1: Check if element reports as visible
webprobe inspect "" ".element" --profile dev --tab main
# Look for: "visible": false

# Step 2: Check what's hiding it
webprobe eval "" "getComputedStyle(document.querySelector('.element')).display" --unsafe-eval --profile dev --tab main
webprobe eval "" "getComputedStyle(document.querySelector('.element')).opacity" --unsafe-eval --profile dev --tab main
webprobe eval "" "getComputedStyle(document.querySelector('.element')).visibility" --unsafe-eval --profile dev --tab main

# Step 3: Check for layout issues
webprobe analyze "" ".element" --focus anomalies --profile dev --tab main
```

### Flexbox not working
```bash
webprobe inspect "http://localhost:3000" ".container"
# Check: computed_styles.display === "flex"
```

### Z-index issues
```bash
webprobe analyze "http://localhost:3000" ".modal" --focus anomalies  
# Check for: z-index context problems
```

### Margins collapsing unexpectedly
```bash
webprobe analyze "http://localhost:3000" ".header" --focus spacing
# Check evidence for: "margin collapsed"
```

### Responsive breakpoints
```bash
webprobe inspect "http://localhost:3000" ".grid" --viewport 375x667   # Mobile
webprobe inspect "http://localhost:3000" ".grid" --viewport 768x1024  # Tablet
webprobe inspect "http://localhost:3000" ".grid" --viewport 1920x1080 # Desktop
```

## Advanced Commands

### find-text - Search by text content
```bash
webprobe find-text "http://localhost:3000" "Submit" --element-type button
```
Note: Normalizes whitespace (trims and collapses spaces), ignores hidden elements

### eval - Execute JavaScript (requires --unsafe-eval)
```bash
webprobe eval "http://localhost:3000" "document.body.scrollHeight" --unsafe-eval
```
Returns: JSON-serialized value (can be primitives or objects via JSON.stringify)

### batch - Multiple commands in sequence
```bash
webprobe batch '[
  {"type": "goto", "url": "http://localhost:3000"},
  {"type": "type", "selector": "#search", "text": "query"},
  {"type": "click", "selector": ".search-btn"}
]'
```

## Experimental Features (May have limitations)

### diagnose - Basic overflow detection
```bash
webprobe diagnose "http://localhost:3000" ".container" --check overflow
```
Implementation: Checks scrollWidth vs clientWidth

### validate - Basic accessibility checks  
```bash
webprobe validate "http://localhost:3000" --check accessibility
```
Checks: Missing alt text, labels, heading hierarchy

### compare - Simple diff between pages
```bash
webprobe compare "http://localhost:3000/before" "http://localhost:3000/after"
```

### screenshot - Save page image
```bash
webprobe screenshot "http://localhost:3000" --output screen.png
```

### iframe - Same-origin iframe inspection only
```bash
webprobe iframe "http://localhost:3000" "iframe#widget" ".content"
# Cross-origin iframes return permission error
```

### layout - Box model details
```bash
webprobe layout "http://localhost:3000" ".card"
```

## JSON Response Format

### Success
```json
{
  "selector": ".element",
  "position": {"x": 10, "y": 20},
  "size": {"width": 100, "height": 50},
  "visible": true,
  "in_viewport": true
}
```

### Error
```json
{
  "error": true,
  "message": "No elements found matching selector: .missing",
  "exit_code": 2
}
```

## Exit Codes
- 0: Success
- 1: Invalid command or options
- 2: Element not found
- 3: Multiple elements when expecting one
- 4: WebDriver connection failed
- 5: Timeout

## Options
- `--browser chrome|firefox` (default: chrome) - only for daemon start
- `--profile NAME` (required when using --tab)
- `--tab NAME` (persistent session, requires --profile)
- `--viewport WIDTHxHEIGHT` (e.g., 375x667)
- `--format json|simple` (default: json)
- `--headless true|false` (default: true)
- `--all` (return all matching elements)
- `--index N` (return Nth element, 0-based)
- `--expect-one` (error if multiple matches)
- `--debug` (show retry attempts and JS errors)
- URL can be `""` (empty string) to stay on current page with `--tab`

## Quick Reference
```bash
# Core inspection
webprobe inspect <url> <selector> [--viewport WxH] [--all|--index N] [--format json|simple]
webprobe analyze <url> <selector> --focus [spacing|wrapping|anomalies]
webprobe detect <url>

# Interaction
webprobe click <url> <selector>
webprobe type <url> <selector> <text> [--clear]
webprobe scroll <url> [--by-y N] [--to bottom]

# Waiting
webprobe wait-navigation <url> [--timeout N]
webprobe wait-idle <url> [--timeout N] [--idle-time N]

# Search
webprobe find-text <url> <text> [--fuzzy] [--element-type TYPE]

# Sessions (requires daemon + profile)
webprobe daemon start --browser chrome|firefox
webprobe daemon stop
webprobe profile create <name> --browser chrome|firefox
webprobe profile list|info|destroy <name>
webprobe status --profile <profile> --tab <name>
webprobe tab list [--profile <profile>]
webprobe tab close <name>

# Advanced
webprobe eval <url> <js-code> --unsafe-eval
webprobe batch <json-array>

# Experimental
webprobe diagnose <url> <selector> --check [overflow|spacing]
webprobe validate <url> --check [accessibility|seo]
webprobe compare <url1> <url2>
webprobe screenshot <url> --output <file>
```

## Common Errors & How to Fix Them

### Error: "Daemon not running"
```bash
# Fix: Start the daemon first
webprobe daemon start --browser chrome
```

### Error: "--tab requires --profile to be specified"
```bash
# Wrong:
webprobe inspect "http://localhost:3000" ".nav" --tab main

# Correct:
webprobe profile create my-session --browser chrome
webprobe inspect "http://localhost:3000" ".nav" --profile my-session --tab main
```

### Error: "No elements found matching selector"
```bash
# Check 1: Element might be lazy-loaded
webprobe wait-idle "http://localhost:3000" --timeout 5000
webprobe inspect "http://localhost:3000" ".dynamic-content"

# Check 2: Element might be in iframe (same-origin only)
webprobe iframe "http://localhost:3000" "iframe#widget" ".content"

# Check 3: Typo in selector or element doesn't exist
```

### Error: "Multiple elements found"
```bash
# Fix 1: Get all matches
webprobe inspect "http://localhost:3000" ".card" --all

# Fix 2: Get specific element by index
webprobe inspect "http://localhost:3000" ".card" --index 0
```

## Edge Cases & Limitations

- **Shadow DOM**: Selectors don't pierce shadow roots (no --pierce-shadow option)
- **Virtualized lists**: May need multiple scrolls to render all items
- **Cross-origin iframes**: Returns permission error (browser security)
- **Hover states**: Cannot capture without JavaScript simulation
- **Animations**: Captures current frame only, not motion
- **Performance**: Browser pool maintains up to 3 instances with daemon for speed
- **Profile requirement**: Using `--tab` requires `--profile` (architectural requirement)
- **Browser consistency**: All profiles in a daemon session must use the same browser type